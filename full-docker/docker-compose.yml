version: "3"
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    platform: linux/amd64
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - '2181:2181'
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - my-network

  broker: 
    image: confluentinc/cp-server:latest
    platform: linux/amd64
    hostname: broker
    container_name: broker
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    expose:
      - '29092'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
    networks:
     - my-network

  schema-registry:
    image: confluentinc/cp-schema-registry:latest
    platform: linux/amd64
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - broker
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "broker:29092"
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    networks:
     - my-network

  kafka-topics:
    image: confluentinc/cp-kafka:latest
    container_name: kafka-topics
    depends_on:
      - broker
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server broker:29092 --list

      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server broker:29092 --create --if-not-exists --topic test-topic1 --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server broker:29092 --create --if-not-exists --topic test-topic2 --replication-factor 1 --partitions 1

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server broker:29092 --list
      "
    networks:
      - my-network

networks:
  my-network:
    driver: bridge

  # avro-producer:
  #   image: confluentinc/cp-kafka:latest
  #   container_name: avro-producer
  #   depends_on:
  #     - broker
  #     - schema-registry
  #   entrypoint: [ '/bin/sh', '-c' ]
  #   command: |
  #     "
  #     # Wait for the broker and schema to run
  #     sleep 10s
  #     echo 'starting'
  #     # Define the Avro schema in a file named schema.avsc
  #     echo '{"type":"record","name":"user","fields":[{"name":"id","type":"int"},{"name":"firstname","type":"string"}]}' > schema.avsc
  #     echo 'schema file built'
  #     # Register the Avro schema with the Schema Registry
  #     curl -X POST --data '{"schema": "'$(cat schema.avsc)'"}' -H 'Content-Type: application/vnd.schemaregistry.v1+json' http://localhost:8081/subjects/test-topic1-value/versions

  #     # Produce a message to the test-topic1 topic with Avro serialization

  #     echo 'now attempting to produce the schema'
  #     echo '{"id": "1","firstname": "david","lastname": "gurule","email": "email@email.com"}' | kafka-avro-console-producer --bootstrap-server broker:29092 --property schema.registry.url=http://localhost:28081 --topic test-topic1 --property value.schema="'$(cat schema.avsc)'"
  #     "   
  #   networks:
  #     - my-network